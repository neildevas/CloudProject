#!/usr/bin/env python3

import configparser
import json
import docker
import etcd
from flask import Flask, request


# INITIALIZATION

config = configparser.ConfigParser()
config.read("config.ini")

# DATA STRUCTURE 'cloud_info'
cloud_info = {}
#
# {
#   "application_name1":
#   {
#     "containers":
#     {
#       "id1":
#       (container_object, {internal_port1:host_port1, ...})
#       ...
#     }
#     "load_balancers":
#     {
#       TODO
#     }
#   }
#   ...
# }

dkr = docker.from_env()

etcd_client = etcd.Client()

# TODO dont remove containers from etcd unless you search for them and they're dead
# TODO on bootup, any containers not in etcd must be killed


# DOCKER HELPERS

def run_in_container(cmd_str, port_map=None):
    return dkr.containers.run(
        "ubuntu",
        cmd_str,
        remove=True,
        detach=True
    )

def show_all_containers(all_containers=False):
    return dkr.containers.list(all=all_containers)

def kill_all_not_running():
    dkr.containers.prune()

def kill_by_id(*ids):
    fltr = {"id":i for i in ids}
    dkr.containers.prune(fltr)


# SERVER HELPERS

def create_command(req):
    if "app_name" not in req:
        return "createe: app_name required"
    app_name = req["app_name"]

    # put app_name in cloud_info and etcd
    cloud_info[app_name] = {"containers": {}, "load_balancers": {}}
    # TODO put app in etd

    return "create successful"

def run_command(req):
    if "app_name" not in req:
        return "run: app_name required"
    app_name = req["app_name"]
    if app_name not in cloud_info:
        return "run: app_name not found, must create app first"

    if "command_string" not in req:
        return "run: command_string required"
    command_string = req["command_string"]

    port_map = {}
    if "port_map" in req:
        port_map = eval(req["port_map"])

    container = run_in_container(command_string)
    cloud_info[app_name]["containers"][container.id] = (container, port_map)

    return "run successful"

def stop_command(req):
    if "app_name" not in req:
        return "run: app_name required"
    app_name = req["app_name"]
    if app_name not in cloud_info:
        return "run: app_name not found, must create app first"

    if "worker_id" not in req:
        return "stop: worker_id required"
    worker_id = req["worker_id"]

    if worker_id not in cloud_info[app_name]["containers"]:
        return "worker_id "+worker_id+" not found in app "+app_name

    container,_ = cloud_info[app_name]["containers"][worker_id]

    extra = ""
    try: container.kill()
    except: extra = " (container already dead)"

    del cloud_info[app_name]["containers"][worker_id]

    return "stop successful (worker_id-"+worker_id+")" + extra

def info_command(req):
    strs = []
    def pretty(d, indent=0):
       for key, value in d.items():
          strs.append('\t' * indent + str(key))
          if isinstance(value, dict):
             pretty(value, indent+1)
          else:
             strs.append('\t' * (indent+1) + str(value))
    pretty(cloud_info)
    return "\n".join(strs)


# FLASK

app = Flask(__name__)

@app.route("/", methods=["POST"])
def only_route():
    req = request.get_json()
    command = req['command']
    if "create" == command:
        return create_command(req)
    elif "run" == command:
        return run_command(req)
    elif "stop" == command:
        return stop_command(req)
    elif "info" == command:
        return info_command(req)
    else:
        return "command not found"

app.run(host='0.0.0.0', port=int(config["MANAGER_SERVER"]["Port"]))
