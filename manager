#!/usr/bin/env python3

import configparser
import json
import docker
from flask import Flask, request

config = configparser.ConfigParser()
config.read("config.ini")

# DATA STRUCTURE 'cloud_info'
cloud_info = {}
#
# {
#   "application_name1":
#   {
#     "containers":
#     {
#       "id1":
#       (container_object, {internal_port1:host_port1, ...})
#       ...
#     }
#     "load_balancers":
#     {
#       TODO
#     }
#   }
#   ...
# }

dkr = docker.from_env()

# TODO dont remove containers from etcd unless you search for them and they're dead
# TODO on bootup, any containers not in etcd must be killed

# DOCKER HELPERS

def run_in_container(cmd_str):
    return dkr.containers.run(
        "ubuntu",
        cmd_str,
        remove=True,
        detach=True
    )

def show_all_containers(all_containers=False):
    return dkr.containers.list(all=all_containers)

def kill_all_not_running():
    dkr.containers.prune()

def kill_by_id(*ids):
    fltr = {"id":i for i in ids}
    dkr.containers.prune(fltr)

# SERVER HELPERS

def create_command(req):
    if "app_name" not in req:
        return "createe: app_name required"
    app_name = req["app_name"]

    # put app_name in cloud_info and etcd
    cloud_info[app_name] = {}
    # TODO put app in etd

    return "create successful"

def run_command(req):
    if "app_name" not in req:
        return "run: app_name required"
    app_name = req["app_name"]

    if "command_string" not in req:
        return "run: command_string required"
    command_string = req["command_string"]

    port_map = {}
    if "port_map" in req:
        port_map = req["port_map"]

    return "run successful"


def kill_command(req):
    pass


















# FLASK

app = Flask(__name__)

@app.route("/", methods=["POST"])
def only_route():
    req = request.get_json()
    command = req['command']
    if "create" == command:
        return create_command(req)
    elif "run" == command:
        return run_command(req)
    elif "kill" == command:
        return kill_command(req)
    else:
        return "command not found"

app.run(host='0.0.0.0', port=int(config["MANAGER_SERVER"]["Port"]))
