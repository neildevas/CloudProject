#!/usr/bin/env python3

import configparser
import json
import docker
import etcd
import nginx
from flask import Flask, request


# INITIALIZATION
#-----------------------------------------------------------------------------------------------------

# DATA STRUCTURE 'cloud_info'
cloud_info = {}
#
# {
#   "application_name1":
#   {
#     "containers":
#     {
#       "id1":
#       (container_object, {internal_port1:host_port1, ...}, load_balancer_port)
#       ...
#     }
#      each application should have the following info: load balancer with host port and upstream name, server group that has a name and a list of host ports for containers
#     "load_balancers": 
#     {
#       map between external port and list of container ports
#       host_port_1:
#       (upstream_name, [container_port1, container_port2,...]),
#       host_port_2:
#       (upstream_name, [container_port1, container_port2,...])
#     }
#   }
#   ...
# }
#
# etcd equivalent of cloud_info:
# /mycloud/
# /mycloud/application_name1/
# /mycloud/application_name1/containers/
# /mycloud/application_name1/containers/(id1:port_map_str)
# /mycloud/application_name1/load_balancers/


config = configparser.ConfigParser()
config.read("config.ini")

docker_client = docker.from_env()
docker_client.containers.prune() # remove all non-running containers
docker_low_level_client = docker.APIClient(base_url='unix://var/run/docker.sock') # low-level API needed to get the random port and the command a container is running
etcd_client = etcd.Client()
nginx_conf_path = '/usr/local/etc/nginx/nginx.conf' # where the nginx config file is located
nginx_client = nginx.loadf(nginx_conf_path)

# populate cloud_info using etcd
mycloud_exists = False
try:
    etcd_client.read("/mycloud", dir=True)
    mycloud_exists = True
except etcd.EtcdKeyNotFound:
    etcd_client.write("/mycloud", None, dir=True)

def children_of_dir_read_result(dir_read_result):
    if next(dir_read_result.leaves) is dir_read_result: return []
    else: return list(dir_read_result.leaves)

if mycloud_exists:
    mycloud_dir = etcd_client.read('/mycloud', dir=True)

    for app_dir in children_of_dir_read_result(mycloud_dir):
        app_dir = etcd_client.read(app_dir.key, dir=True)

        [containers_dir, load_balancers_dir] = children_of_dir_read_result(app_dir)
        containers_dir     = etcd_client.read(containers_dir.key,     dir=True)
        load_balancers_dir = etcd_client.read(load_balancers_dir.key, dir=True)

        app_name = app_dir.key.split('/')[-1]
        cloud_info[app_name] = {"containers": {}, "load_balancers": {}}

        for container_file in children_of_dir_read_result(containers_dir):
            container_id = container_file.key.split('/')[-1]

            try:
                container = docker_client.containers.get(container_id) # throws NotFound
                (port_map, load_balancer_port) = eval(container_file.value)
                cloud_info[app_name]["containers"][container_id] = (container, port_map, load_balancer_port)
            except docker.errors.NotFound:
                print("container: "+container_id+" not found")
                etcd_client.delete("/mycloud/"+app_name+"/containers/"+container_id, recursive=True)

        for load_balancer_file in children_of_dir_read_result(load_balancers_dir):
            load_balancer_port = load_balancer_file.key.split('/')[-1]
            upstream_and_proxied_ports = eval(load_balancer_file.value) # value = (upstream_name, [proxied_ports])
            cloud_info[app_name]["load_balancers"][load_balancer_port] = upstream_and_proxied_ports
            
# cloud_info helpers
#-----------------------------------------------------------------------------------------------------

def set_of_container_ids(cloud_info):
    container_ids = set()

    mycloud_dir = etcd_client.read('/mycloud', dir=True)

    for app_dir in children_of_dir_read_result(mycloud_dir):
        app_dir = etcd_client.read(app_dir.key, dir=True)

        # BUG this appears to be out of order sometimes
        # Sometimes it will print 'cid in set: 3000'
        [containers_dir, load_balancers_dir] = children_of_dir_read_result(app_dir)
        containers_dir = etcd_client.read(containers_dir.key, dir=True)

        for container_file in children_of_dir_read_result(containers_dir):
            container_id = container_file.key.split('/')[-1]
            container_ids.add(container_id)

    for container_id in container_ids:
        print('cid in set: '+container_id)

    return container_ids

# kill containers not in cloud_info
def kill_unrecorded_containers(cloud_info):
    recorded_container_ids = set_of_container_ids(cloud_info)

    for container in docker_client.containers.list(all=True):
        if container.id not in recorded_container_ids:
            try: container.kill()
            except: print("container "+container.id+" died before killing it")

def is_port_in_use(host_port):
    for _, app_info in cloud_info.items():
        app_load_balancers = app_info["load_balancers"]
        for load_balancer_port, _ in app_load_balancers.items():
            if (host_port == int(load_balancer_port)):
                return True
    return False

# TODO make a system call to reload nginx
def construct_nginx_conf_from_cloud_info():
    streams = nginx_client.filter('Stream')
    if (len(streams) > 0):
        nginx_client.remove(streams[0])
    nginx_stream = nginx.Stream()

    for _, app_info in cloud_info.items():
        if ("load_balancers") in app_info:
            app_load_balancers = app_info["load_balancers"]
            for load_balancer_port,upstream_and_server_info in app_load_balancers.items():
                nginx_server = nginx.Server()
                nginx_server.add(nginx.Key('listen', str(load_balancer_port)))
                (upstream_name, container_host_port_list) = upstream_and_server_info
                nginx_server.add(nginx.Key('proxy_pass', upstream_name))
                nginx_upstream = nginx.Upstream(upstream_name)
                for port in container_host_port_list:
                    nginx_upstream.add(nginx.Key('server', 'localhost:'+str(port)))
                nginx_stream.add(nginx_server, nginx_upstream)

    nginx_client.add(nginx_stream)
    nginx.dumpf(nginx_client, nginx_conf_path)


kill_unrecorded_containers(cloud_info)
construct_nginx_conf_from_cloud_info()

# DOCKER HELPERS
#-----------------------------------------------------------------------------------------------------

def show_all_containers(all_containers=False):
    return docker_client.containers.list(all=all_containers)

def kill_all_not_running():
    docker_client.containers.prune()

def kill_by_id(*ids):
    fltr = {"id":i for i in ids}
    docker_client.containers.prune(fltr)

def run_container(command_string, container_port='80'):
    return docker_client.containers.run(
        "alpine",
        command_string,
        ports={container_port : None}, # use a random host port
        tty=True,
        remove=True,
        detach=True
    )
def get_container_host_port(container):
    container_port_data = docker_low_level_client.inspect_container(container.id)["NetworkSettings"]["Ports"]
    container_host_port = container_port_data[list(container_port_data.keys())[0]][0]["HostPort"]
    return container_host_port

# SERVER HELPERS
#-----------------------------------------------------------------------------------------------------

def create_command(req):
    if "app_name" not in req:
        return "create: app_name required"
    app_name = req["app_name"]

    # put app_name in cloud_info
    if app_name in cloud_info:
        return "create: app "+app_name+" already exists"
    cloud_info[app_name] = {"containers": {}, "load_balancers": {}}

    # put app_name in etcd
    try:
        etcd_client.read("/mycloud/"+app_name, dir=True)
        return "create: app "+app_name+" already exists in etcd"
    except etcd.EtcdKeyNotFound: pass
    etcd_client.write("/mycloud/"+app_name,                   None, dir=True)
    etcd_client.write("/mycloud/"+app_name+"/containers",     None, dir=True)
    etcd_client.write("/mycloud/"+app_name+"/load_balancers", None, dir=True)

    return "create successful"

def run_command(req):
    if "app_name" not in req:
        return "run: app_name required"
    app_name = req["app_name"]
    if app_name not in cloud_info:
        return "run: app_name not found, must create app first"

    if "command_string" not in req:
        return "run: command_string required"
    command_string = req["command_string"]

    user_port_map = {}
    container_port_map = {}
    container_port = None
    container_host_port = None

    # check if the requested port is already being used by another load balancer
    if "port_map" in req:
        user_port_map = eval(req["port_map"])
        container_port = list(user_port_map.keys())[0]
        load_balancer_port = user_port_map[container_port] # load balancer port is what the user specifies as the host port
        if (is_port_in_use(load_balancer_port)):
            return "run: Port " + str(load_balancer_port) + " is already in use. Try another port or use the scale command."
    try:
        container = docker_client.containers.run(
        "alpine",
        command_string,
        ports={container_port : None}, # use a random host port
        tty=True,
        remove=True,
        detach=True
    )
    except Exception as e:
        return "run: failed: "+str(e)

    container_host_port = get_container_host_port(container)
    container_port_map = {container_port : container_host_port}
    cloud_info[app_name]["containers"][container.id] = (container, container_port_map, load_balancer_port) # add the load balancer port to the list
    
    # Put load balancing info in cloud_info
    upstream_name_and_proxied_ports = (str(load_balancer_port)+"_upstream", [container_host_port])
    cloud_info[app_name]["load_balancers"][str(load_balancer_port)] = upstream_name_and_proxied_ports

    # Configure the nginx.conf file
    construct_nginx_conf_from_cloud_info()

    etcd_client.write("/mycloud/"+app_name+"/containers/"+container.id, (container_port_map, load_balancer_port))

    # put load_balancer port in etcd
    etcd_client.write("/mycloud/"+app_name+"/load_balancers/"+str(load_balancer_port), upstream_name_and_proxied_ports)
    return "run successful"

def stop_command(req):
    if "app_name" not in req:
        return "run: app_name required"
    app_name = req["app_name"]
    if app_name not in cloud_info:
        return "run: app_name not found, must create app first"

    if "worker_id" not in req:
        return "stop: worker_id required"
    worker_id = req["worker_id"]

    if worker_id not in cloud_info[app_name]["containers"]:
        return "worker_id "+worker_id+" not found in app "+app_name

    (container, port_map, load_balancer_port) = cloud_info[app_name]["containers"][worker_id]

    extra = ""
    try: container.kill()
    except: extra = " (container already dead)"

    del cloud_info[app_name]["containers"][worker_id]

    # remove port from load balancer list
    container_host_port = list(port_map.values())[0]
    load_balancer = cloud_info[app_name]["load_balancers"][str(load_balancer_port)]
    (upstream_name, proxied_port_list) = load_balancer
    if container_host_port in proxied_port_list:
        proxied_port_list.remove(container_host_port)
        if (len(proxied_port_list) < 1):
            # remove the load balancer if this was the only container listening to it
            del cloud_info[app_name]["load_balancers"][str(load_balancer_port)]
            etcd_client.delete("/mycloud/"+app_name+"/load_balancers/"+str(load_balancer_port))
        else:   
            cloud_info[app_name]["load_balancers"][str(load_balancer_port)] = load_balancer
            etcd_client.write("/mycloud/"+app_name+"/load_balancers/"+str(load_balancer_port), (upstream_name, proxied_port_list))
        construct_nginx_conf_from_cloud_info()

    etcd_client.delete("/mycloud/"+app_name+"/containers/"+container.id)
    return "stop successful (worker_id-"+worker_id+")" + extra

def scale_command(req):
    if "app_name" not in req:
        return "scale: app_name required"
    app_name = req["app_name"]
    if app_name not in cloud_info:
        return "stop_app: app_name not found, must create app first"

    if "worker_id" not in req:
        return "stop: worker_id required"
    worker_id = req["worker_id"]
    if worker_id not in cloud_info[app_name]["containers"]:
        return "worker_id "+worker_id+" not found in app "+app_name

    num_workers = req["num_workers"]

    # Get the container we want to scale
    (container,port_map, load_balancer_port) = cloud_info[app_name]["containers"][worker_id]

    # get the command
    container_info_dict = docker_low_level_client.inspect_container(container.id)
    command_name = container_info_dict["Path"]
    command_args = " ".join(container_info_dict["Args"])
    final_command_str = command_name + " " + command_args

    # get the internal container port
    container_internal_port = list(port_map.keys())[0]

    # build the request and call run_command for requested number of new workers
    for _ in range(num_workers):
        try:
            container = docker_client.containers.run(
                "alpine",
                final_command_str,
                ports={container_internal_port : None}, # use a random host port
                tty=True,
                remove=True,
                detach=True
            )
        except Exception as e:
            return "run: failed: "+str(e)

        # store in cloud_info app containers
        container_host_port = get_container_host_port(container)
        container_port_map = {container_internal_port : container_host_port}
        cloud_info[app_name]["containers"][container.id] = (container, container_port_map, load_balancer_port)

        # store in cloud_info app load balancers
        load_balancer = cloud_info[app_name]["load_balancers"][str(load_balancer_port)]
        (upstream_name, proxied_port_list) = load_balancer
        proxied_port_list.append(container_host_port)
        cloud_info[app_name]["load_balancers"][str(load_balancer_port)] = load_balancer

        # construct nginx file
        construct_nginx_conf_from_cloud_info()

        # write to etcd
        etcd_client.write("/mycloud/"+app_name+"/containers/"+container.id, (container_port_map, load_balancer_port))
        etcd_client.write("/mycloud/"+app_name+"/load_balancers/"+str(load_balancer_port), (upstream_name, proxied_port_list))

    return "scale successful"
    
def stop_app_command(req):
    if "app_name" not in req:
        return "stop_app: app_name required"
    app_name = req["app_name"]
    if app_name not in cloud_info:
        return "stop_app: app_name not found, must create app first"

    # delete all containers and load balancers in app
    for container_id in cloud_info[app_name]["containers"]:
        container,_,load_balancer_port = cloud_info[app_name]["containers"][container_id]

        extra = ""
        try: container.kill()
        except: extra = " (container already dead)"

        etcd_client.delete("/mycloud/"+app_name+"/containers/"+container.id)
        etcd_client.delete("/mycloud/"+app_name+"/load_balancers/"+str(load_balancer_port))

    etcd_client.delete("/mycloud/"+app_name+"/containers", dir=True)
    etcd_client.delete("/mycloud/"+app_name+"/load_balancers", dir=True)

    del cloud_info[app_name]
    construct_nginx_conf_from_cloud_info() # reconfigure nginx_conf 
    etcd_client.delete("/mycloud/"+app_name, dir=True)
    return  "stop_app successful: "+app_name+" stopped"

def info_command(req):
    strs = []
    def pretty(d, indent=0):
       for key, value in d.items():
          strs.append('\t' * indent + str(key))
          if isinstance(value, dict):
             pretty(value, indent+1)
          else:
             strs.append('\t' * (indent+1) + str(value))
    pretty(cloud_info)
    return "\n".join(strs)

# FLASK
#-----------------------------------------------------------------------------------------------------

app = Flask(__name__)

@app.route("/", methods=["POST"])
def only_route():
    req = request.get_json()
    command = req['command']
    if "create" == command:
        return create_command(req)
    elif "run" == command:
        return run_command(req)
    elif "stop" == command:
        return stop_command(req)
    elif "stop_app" == command:
        return stop_app_command(req)
    elif "scale" == command:
        return scale_command(req)
    elif "info" == command:
        return info_command(req)
    else:
        return "command not found"

app.run(host='0.0.0.0', port=int(config["MANAGER_SERVER"]["Port"]))
